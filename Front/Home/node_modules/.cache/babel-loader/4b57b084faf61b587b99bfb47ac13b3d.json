{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _construct = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = (0, _construct.default)(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_construct.default) return false;\n  if (_construct.default.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call((0, _construct.default)(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Parse User');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: {[prop: string]: any}*/\n    , classProps\n    /*: {[prop: string]: any}*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this8 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this8.currentUserAsync();\n\n            case 2:\n              currentUser = _context.sent;\n\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n\n            case 6:\n              currentUserCache = user;\n\n              user._cleanupAuthData();\n\n              user._synchronizeAllAuthData();\n\n              return _context.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"sources":["/home/arsalan/Desktop/Front/Home/node_modules/parse/lib/browser/ParseUser.js"],"names":["_interopRequireDefault","require","_Object$defineProperty2","exports","value","default","_regenerator","_asyncToGenerator2","_stringify","_construct","_defineProperty","_promise","_typeof2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_AnonymousUtils","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_Storage","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Date","prototype","toString","call","e","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","_super","attributes","_this","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","usePost","logIn","_this4","_len","args","Array","_key4","updateUserOnDisk","_this5","_len2","_key5","removeUserFromDisk","_this6","_len3","_key6","_this7","_len4","_key7","getUsername","verifyPassword","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","requestEmailVerification","verificationOption","isAllowed","_upgradeToRevocableSession","currentAsync","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","_this8","mark","_callee","wrap","_context","prev","next","sent","equals","isLinked","destroy","_cleanupAuthData","_synchronizeAllAuthData","abrupt","stop","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","promise","isAnonymous","currentSession","_logOutWithAll","SESSION_MISSING","session","setUserController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _construct = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = (0, _construct.default)(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_construct.default) return false;\n  if (_construct.default.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call((0, _construct.default)(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Parse User');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: {[prop: string]: any}*/\n    , classProps\n    /*: {[prop: string]: any}*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this8 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this8.currentUserAsync();\n\n            case 2:\n              currentUser = _context.sent;\n\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n\n            case 6:\n              currentUserCache = user;\n\n              user._cleanupAuthData();\n\n              user._synchronizeAllAuthData();\n\n              return _context.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}