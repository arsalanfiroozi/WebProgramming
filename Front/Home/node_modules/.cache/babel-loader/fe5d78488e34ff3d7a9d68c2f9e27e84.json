{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _getIteratorMethod2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator-method\"));\n\nvar _symbol = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/symbol\"));\n\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/from\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _defineProperties = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\"));\n\nvar _getOwnPropertyDescriptors = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\"));\n\nvar _getOwnPropertyDescriptor = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\"));\n\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _getOwnPropertySymbols = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof _symbol.default === \"undefined\" || (0, _getIteratorMethod2.default)(o) == null) {\n    if ((0, _isArray.default)(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = (0, _getIterator2.default)(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context9;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = (0, _slice.default)(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return (0, _from.default)(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = (0, _keys.default)(object);\n\n  if (_getOwnPropertySymbols.default) {\n    var symbols = (0, _getOwnPropertySymbols.default)(object);\n    if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) {\n      return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context7;\n\n      (0, _forEach.default)(_context7 = ownKeys(Object(source), true)).call(_context7, function (key) {\n        (0, _defineProperty3.default)(target, key, source[key]);\n      });\n    } else if (_getOwnPropertyDescriptors.default) {\n      (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source));\n    } else {\n      var _context8;\n\n      (0, _forEach.default)(_context8 = ownKeys(Object(source))).call(_context8, function (key) {\n        (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar uuidv4 = require('uuid/v4');\n/*:: export type Pointer = {\n  __type: string;\n  className: string;\n  objectId: string;\n};*/\n\n/*:: type SaveParams = {\n  method: string;\n  path: string;\n  body: AttributeMap;\n};*/\n\n/*:: type SaveOptions = FullOptions & {\n  cascadeSave?: boolean;\n  context?: AttributeMap;\n}*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\n\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error('Can\\'t create an invalid Parse Object');\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   *\n   * @property {string} id\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"_getId\",\n\n    /** Private methods **/\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | {id: string, className: string}*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = 'classes/' + this.className;\n\n      if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response) && !(0, _includes.default)(attr).call(attr, '.')) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n    /** Public methods **/\n\n  }, {\n    key: \"initialize\",\n    value: function () {// NOOP\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toOfflinePointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Only set nested fields if exists\n\n      var serverData = this._getServerData();\n\n      if (typeof key === 'string' && (0, _includes.default)(key).call(key, '.')) {\n        var field = key.split('.')[0];\n\n        if (!serverData[field]) {\n          return this;\n        }\n      } // Calculate new values\n\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === \"string\") {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error(\"Parse.Object#revert expects either no, or a list of string, arguments.\");\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * For example, <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context4.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context4.sent;\n                return _context4.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context5.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context5.sent;\n\n                if (pinned) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n\n  }, {\n    key: \"attributes\",\n\n    /** Prototype getters / setters **/\n    get: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n  }], [{\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context6;\n\n        (0, _forEach.default)(_context6 = options.include).call(_context6, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor() : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error('Parse.Object.extend\\'s first argument should be the className.');\n        }\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error('Can\\'t create an invalid Parse Object');\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context10.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context10.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context10.next = 8;\n                    break;\n                  }\n\n                  return _context10.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context10.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context10.prev = 13;\n\n                  _iterator2.s();\n\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context10.next = 21;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context10.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 19:\n                  _context10.next = 15;\n                  break;\n\n                case 21:\n                  _context10.next = 26;\n                  break;\n\n                case 23:\n                  _context10.prev = 23;\n                  _context10.t0 = _context10[\"catch\"](13);\n\n                  _iterator2.e(_context10.t0);\n\n                case 26:\n                  _context10.prev = 26;\n\n                  _iterator2.f();\n\n                  return _context10.finish(26);\n\n                case 29:\n                  return _context10.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 30:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee4, null, [[13, 23, 26, 29]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(response) {\n          return _regenerator.default.wrap(function (_context11) {\n            while (1) {\n              switch (_context11.prev = _context11.next) {\n                case 0:\n                  target._clearPendingOps();\n\n                  target._clearServerData();\n\n                  target._finishFetch(response);\n\n                  _context11.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 5:\n                  return _context11.abrupt(\"return\", target);\n\n                case 6:\n                case \"end\":\n                  return _context11.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    return _promise.default.resolve();\n  },\n  destroy: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context14.next = 15;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context14.next = 6;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var _err = new _ParseError.default(results[i].error.code, results[i].error.error);\n\n                        _err.object = batch[i];\n                        errors.push(_err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context14.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n                var aggregate, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context12.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context12.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context12.prev = 5;\n\n                        _iterator3.s();\n\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context12.next = 13;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context12.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 11:\n                        _context12.next = 7;\n                        break;\n\n                      case 13:\n                        _context12.next = 18;\n                        break;\n\n                      case 15:\n                        _context12.prev = 15;\n                        _context12.t0 = _context12[\"catch\"](5);\n\n                        _iterator3.e(_context12.t0);\n\n                      case 18:\n                        _context12.prev = 18;\n\n                        _iterator3.f();\n\n                        return _context12.finish(18);\n\n                      case 21:\n                        return _context12.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 22:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee6, null, [[5, 15, 18, 21]]);\n              }))));\n\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context14.next = 17;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {\n                return _regenerator.default.wrap(function (_context13) {\n                  while (1) {\n                    switch (_context13.prev = _context13.next) {\n                      case 0:\n                        _context13.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context13.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context13.stop();\n                    }\n                  }\n                }, _callee7);\n              }))));\n\n            case 17:\n              return _context14.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 18:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  },\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/\n      = [];\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n          var _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context15) {\n            while (1) {\n              switch (_context15.prev = _context15.next) {\n                case 0:\n                  if (!objectError) {\n                    _context15.next = 2;\n                    break;\n                  }\n\n                  return _context15.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context15.prev = 3;\n\n                  _iterator4.s();\n\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context15.next = 13;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context15.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 9:\n                  _context15.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 11:\n                  _context15.next = 5;\n                  break;\n\n                case 13:\n                  _context15.next = 18;\n                  break;\n\n                case 15:\n                  _context15.prev = 15;\n                  _context15.t0 = _context15[\"catch\"](3);\n\n                  _iterator4.e(_context15.t0);\n\n                case 18:\n                  _context15.prev = 18;\n\n                  _iterator4.f();\n\n                  return _context15.finish(18);\n\n                case 21:\n                  return _context15.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 22:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }\n          }, _callee9, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      // generate _localId in case if cascadeSave=false\n      target._getId();\n\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n        return _regenerator.default.wrap(function (_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context16.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context16.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee10);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;","map":{"version":3,"sources":["/home/arsalan/Desktop/Front/Home/node_modules/parse/lib/browser/ParseObject.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","_Object$defineProperty2","exports","value","default","_map","_find","_getIterator2","_getIteratorMethod2","_symbol","_from","_slice","_defineProperties","_getOwnPropertyDescriptors","_getOwnPropertyDescriptor","_filter","_getOwnPropertySymbols","_defineProperty2","_create","_freeze","_promise","_isArray","_regenerator","_asyncToGenerator2","_concat","_getPrototypeOf","_includes","_stringify","_forEach","_keys","_typeof2","_classCallCheck2","_createClass2","_defineProperty3","_indexOf","_CoreManager","_canBeSerialized","_decode","_encode","_escape2","_ParseACL","_parseDate","_ParseError","_ParseFile","_promiseUtils","_LocalDatastoreUtils","_ParseOp","_ParseQuery","_ParseRelation","SingleInstanceStateController","_unique","UniqueInstanceStateController","_unsavedChildren","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_context9","_arrayLikeToArray","Object","prototype","toString","call","constructor","name","test","arr","len","arr2","Array","ownKeys","object","enumerableOnly","keys","symbols","sym","enumerable","push","apply","_objectSpread","target","arguments","source","_context7","key","_context8","uuidv4","classMap","objectCount","singleInstance","get","setObjectStateController","getServerUrlPath","serverUrl","url","replace","substr","ParseObject","className","attributes","options","initialize","toSet","_objCount","_attr","set","Error","id","_localId","localId","_getId","stateController","getObjectStateController","getServerData","_getStateIdentifier","serverData","_getServerData","unset","_attr2","undefined","setServerData","getPendingOps","keysToClear","pending","_getPendingOps","latest","objectCache","getObjectCache","dirty","_attr3","val","json","stringified","seen","offline","toJSON","__type","dirtyObjects","_getDirtyObjectAttributes","attr","isDotNotation","field","fieldName","split","SetOp","method","body","_getSaveJSON","path","objectId","initializeState","decoded","_attr4","_ensureParentAndKey","createdAt","updatedAt","commitServerChanges","existed","state","getState","serverId","oldState","removeState","response","status","changes","popPendingState","RelationOp","applyTo","UnsetOp","_migrateId","_setExisted","mergeFirstPendingState","seenEntry","attrs","_attr5","_attr6","other","pendingOps","hasOwnProperty","_attr7","_attr8","newOps","readonly","readOnlyAttributes","k","Op","__op","opFromJSON","relation","targetClassName","currentAttributes","newValues","_attr9","ignoreValidation","validation","validate","error","last","_attr10","nextOp","mergeWith","setPendingOp","amount","IncrementOp","item","AddOp","items","AddUniqueOp","RemoveOp","clone","copy","a","duplicateState","_exists","mark","_callee","query","wrap","_context","prev","abrupt","t0","code","OBJECT_NOT_FOUND","stop","ACL","OTHER_CAUSE","_key","INVALID_KEY_NAME","acl","keysToRevert","_len","_key2","_iterator","_step","_key3","_clearPendingOps","erasable","_attr11","fetchOptions","useMasterKey","sessionToken","context","include","_context2","_context3","controller","getObjectController","fetch","arg1","arg2","arg3","_this","reject","saveOptions","installationId","unsaved","cascadeSave","save","then","destroyOptions","resolve","destroy","pinAllWithName","DEFAULT_PIN","unPinAllWithName","_isPinned","_callee2","localDatastore","objectKey","pin","_context4","getLocalDatastore","isEnabled","getKeyForObject","fromPinWithName","sent","_fetchFromLocalDatastore","_callee3","pinned","result","_context5","_serializeObject","fromJSON","_finishFetch","estimateAttributes","clearAllState","list","queryOptions","handleIncludeOptions","fetchAll","fetchAllIfNeeded","_context6","batchSize","obj","override","otherAttributes","_attr12","preserved","_preserveFieldsOnFetch","_clearServerData","protoProps","classProps","extend","adjustedClassName","parentProto","__super__","ParseObjectSubclass","writable","configurable","prop","_prop","createWithoutData","objects","_handlePinAllWithName","_handleUnPinAllWithName","unPinWithName","PIN_PREFIX","DefaultController","forceFetch","objs","ids","results","el","INVALID_CLASS_NAME","MISSING_OBJECT_ID","isDataAvailable","containedIn","_limit","_ref","_callee4","idMap","_i","_obj","_iterator2","_step2","_context10","_updateObjectIfPinned","finish","RESTController","getRESTController","params","join","request","_ref2","_callee5","_context11","_callee8","batches","deleteCompleted","errors","_context14","pop","batch","requests","_err","_callee6","aggregate","_iterator3","_step3","_context12","AGGREGATE_ERROR","_destroyObjectIfPinned","_callee7","_context13","mapIdForPin","returnStatus","filesSaved","all","objectError","continueWhile","nextPending","batchReturned","resolvingPromise","batchReady","batchTasks","index","ready","pushPendingState","enqueueTask","responses","success","_status","_handleSaveResponse","serverError","_handleSaveError","when","_getSaveParams","INCORRECT_TYPE","message","_callee9","_iterator4","_step4","_context15","_updateLocalIdForObject","targetCopy","task","_callee10","_context16","setObjectController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _getIteratorMethod2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator-method\"));\n\nvar _symbol = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/symbol\"));\n\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/from\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _defineProperties = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\"));\n\nvar _getOwnPropertyDescriptors = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\"));\n\nvar _getOwnPropertyDescriptor = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\"));\n\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _getOwnPropertySymbols = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof _symbol.default === \"undefined\" || (0, _getIteratorMethod2.default)(o) == null) {\n    if ((0, _isArray.default)(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = (0, _getIterator2.default)(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context9;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = (0, _slice.default)(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return (0, _from.default)(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = (0, _keys.default)(object);\n\n  if (_getOwnPropertySymbols.default) {\n    var symbols = (0, _getOwnPropertySymbols.default)(object);\n    if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) {\n      return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context7;\n\n      (0, _forEach.default)(_context7 = ownKeys(Object(source), true)).call(_context7, function (key) {\n        (0, _defineProperty3.default)(target, key, source[key]);\n      });\n    } else if (_getOwnPropertyDescriptors.default) {\n      (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source));\n    } else {\n      var _context8;\n\n      (0, _forEach.default)(_context8 = ownKeys(Object(source))).call(_context8, function (key) {\n        (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar uuidv4 = require('uuid/v4');\n/*:: export type Pointer = {\n  __type: string;\n  className: string;\n  objectId: string;\n};*/\n\n/*:: type SaveParams = {\n  method: string;\n  path: string;\n  body: AttributeMap;\n};*/\n\n/*:: type SaveOptions = FullOptions & {\n  cascadeSave?: boolean;\n  context?: AttributeMap;\n}*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\n\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error('Can\\'t create an invalid Parse Object');\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   *\n   * @property {string} id\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"_getId\",\n\n    /** Private methods **/\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | {id: string, className: string}*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = 'classes/' + this.className;\n\n      if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response) && !(0, _includes.default)(attr).call(attr, '.')) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n    /** Public methods **/\n\n  }, {\n    key: \"initialize\",\n    value: function () {// NOOP\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toOfflinePointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Only set nested fields if exists\n\n      var serverData = this._getServerData();\n\n      if (typeof key === 'string' && (0, _includes.default)(key).call(key, '.')) {\n        var field = key.split('.')[0];\n\n        if (!serverData[field]) {\n          return this;\n        }\n      } // Calculate new values\n\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === \"string\") {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error(\"Parse.Object#revert expects either no, or a list of string, arguments.\");\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * For example, <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context4.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context4.sent;\n                return _context4.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context5.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context5.sent;\n\n                if (pinned) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n\n  }, {\n    key: \"attributes\",\n\n    /** Prototype getters / setters **/\n    get: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n  }], [{\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context6;\n\n        (0, _forEach.default)(_context6 = options.include).call(_context6, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor() : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error('Parse.Object.extend\\'s first argument should be the className.');\n        }\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error('Can\\'t create an invalid Parse Object');\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context10.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context10.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context10.next = 8;\n                    break;\n                  }\n\n                  return _context10.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context10.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context10.prev = 13;\n\n                  _iterator2.s();\n\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context10.next = 21;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context10.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 19:\n                  _context10.next = 15;\n                  break;\n\n                case 21:\n                  _context10.next = 26;\n                  break;\n\n                case 23:\n                  _context10.prev = 23;\n                  _context10.t0 = _context10[\"catch\"](13);\n\n                  _iterator2.e(_context10.t0);\n\n                case 26:\n                  _context10.prev = 26;\n\n                  _iterator2.f();\n\n                  return _context10.finish(26);\n\n                case 29:\n                  return _context10.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 30:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee4, null, [[13, 23, 26, 29]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(response) {\n          return _regenerator.default.wrap(function (_context11) {\n            while (1) {\n              switch (_context11.prev = _context11.next) {\n                case 0:\n                  target._clearPendingOps();\n\n                  target._clearServerData();\n\n                  target._finishFetch(response);\n\n                  _context11.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 5:\n                  return _context11.abrupt(\"return\", target);\n\n                case 6:\n                case \"end\":\n                  return _context11.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    return _promise.default.resolve();\n  },\n  destroy: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context14.next = 15;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context14.next = 6;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var _err = new _ParseError.default(results[i].error.code, results[i].error.error);\n\n                        _err.object = batch[i];\n                        errors.push(_err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context14.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n                var aggregate, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context12.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context12.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context12.prev = 5;\n\n                        _iterator3.s();\n\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context12.next = 13;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context12.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 11:\n                        _context12.next = 7;\n                        break;\n\n                      case 13:\n                        _context12.next = 18;\n                        break;\n\n                      case 15:\n                        _context12.prev = 15;\n                        _context12.t0 = _context12[\"catch\"](5);\n\n                        _iterator3.e(_context12.t0);\n\n                      case 18:\n                        _context12.prev = 18;\n\n                        _iterator3.f();\n\n                        return _context12.finish(18);\n\n                      case 21:\n                        return _context12.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 22:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee6, null, [[5, 15, 18, 21]]);\n              }))));\n\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context14.next = 17;\n                break;\n              }\n\n              return _context14.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {\n                return _regenerator.default.wrap(function (_context13) {\n                  while (1) {\n                    switch (_context13.prev = _context13.next) {\n                      case 0:\n                        _context13.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context13.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context13.stop();\n                    }\n                  }\n                }, _callee7);\n              }))));\n\n            case 17:\n              return _context14.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 18:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  },\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/\n      = [];\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n          var _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context15) {\n            while (1) {\n              switch (_context15.prev = _context15.next) {\n                case 0:\n                  if (!objectError) {\n                    _context15.next = 2;\n                    break;\n                  }\n\n                  return _context15.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context15.prev = 3;\n\n                  _iterator4.s();\n\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context15.next = 13;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context15.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 9:\n                  _context15.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 11:\n                  _context15.next = 5;\n                  break;\n\n                case 13:\n                  _context15.next = 18;\n                  break;\n\n                case 15:\n                  _context15.prev = 15;\n                  _context15.t0 = _context15[\"catch\"](3);\n\n                  _iterator4.e(_context15.t0);\n\n                case 18:\n                  _context15.prev = 18;\n\n                  _iterator4.f();\n\n                  return _context15.finish(18);\n\n                case 21:\n                  return _context15.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 22:\n                case \"end\":\n                  return _context15.stop();\n              }\n            }\n          }, _callee9, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      // generate _localId in case if cascadeSave=false\n      target._getId();\n\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n        return _regenerator.default.wrap(function (_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context16.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context16.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee10);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}