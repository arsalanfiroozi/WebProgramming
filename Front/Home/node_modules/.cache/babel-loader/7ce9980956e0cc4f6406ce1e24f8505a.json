{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Contains all Parse API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nvar Parse = {\n  /**\n   * Call this method first to set up your authentication tokens for Parse.\n   *\n   * @param {string} applicationId Your Parse Application ID.\n   * @param {string} [javaScriptKey] Your Parse JavaScript Key (Not needed for parse-server)\n   * @param {string} [masterKey] Your Parse Master Key. (Node.js only!)\n   * @static\n   */\n  initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    if (\"browser\" === 'browser' && _CoreManager.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {\n      /* eslint-disable no-console */\n      console.log('It looks like you\\'re using the browser version of the SDK in a ' + 'node.js environment. You should require(\\'parse/node\\') instead.');\n      /* eslint-enable no-console */\n    }\n\n    Parse._initialize(applicationId, javaScriptKey);\n  },\n  _initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  },\n\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  },\n\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Parse.setAsyncStorage Parse.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n  setLocalDatastoreController: function (controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  },\n\n  /**\n   * @member {string} Parse.applicationId\n   * @static\n   */\n  set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  },\n\n  get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  },\n\n  /**\n   * @member {string} Parse.javaScriptKey\n   * @static\n   */\n  set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  },\n\n  get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  },\n\n  /**\n   * @member {string} Parse.masterKey\n   * @static\n   */\n  set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  },\n\n  get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  },\n\n  /**\n   * @member {string} Parse.serverURL\n   * @static\n   */\n  set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  },\n\n  get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthToken\n   * @static\n   */\n  set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  },\n\n  get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthType\n   * @static\n   */\n  set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  },\n\n  get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  },\n\n  /**\n   * @member {string} Parse.liveQueryServerURL\n   * @static\n   */\n  set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  },\n\n  get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.encryptedUser\n   * @static\n   */\n  set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  },\n\n  get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  },\n\n  /**\n   * @member {string} Parse.secret\n   * @static\n   */\n  set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  },\n\n  get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  },\n\n  /**\n   * @member {boolean} Parse.idempotency\n   * @static\n   */\n  set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  },\n\n  get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  }\n\n};\nParse.ACL = require('./ParseACL').default;\nParse.Analytics = require('./Analytics');\nParse.AnonymousUtils = require('./AnonymousUtils').default;\nParse.Cloud = require('./Cloud');\nParse.CoreManager = require('./CoreManager');\nParse.Config = require('./ParseConfig').default;\nParse.Error = require('./ParseError').default;\nParse.FacebookUtils = require('./FacebookUtils').default;\nParse.File = require('./ParseFile').default;\nParse.GeoPoint = require('./ParseGeoPoint').default;\nParse.Polygon = require('./ParsePolygon').default;\nParse.Installation = require('./ParseInstallation').default;\nParse.LocalDatastore = require('./LocalDatastore');\nParse.Object = require('./ParseObject').default;\nParse.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nParse.Push = require('./Push');\nParse.Query = require('./ParseQuery').default;\nParse.Relation = require('./ParseRelation').default;\nParse.Role = require('./ParseRole').default;\nParse.Schema = require('./ParseSchema').default;\nParse.Session = require('./ParseSession').default;\nParse.Storage = require('./Storage');\nParse.User = require('./ParseUser').default;\nParse.LiveQuery = require('./ParseLiveQuery').default;\nParse.LiveQueryClient = require('./LiveQueryClient').default;\n\nParse._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nParse._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nParse._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nParse._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nParse._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nParse.enableLocalDatastore = function () {\n  Parse.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isLocalDatastoreEnabled = function () {\n  return Parse.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Parse.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nParse.dumpLocalDatastore = function () {\n  if (!Parse.LocalDatastore.isEnabled) {\n    console.log('Parse.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return _promise.default.resolve({});\n  } else {\n    return Parse.LocalDatastore._getAllContents();\n  }\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nParse.enableEncryptedUser = function () {\n  Parse.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isEncryptedUserEnabled = function () {\n  return Parse.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default); // For legacy requires, of the form `var Parse = require('parse').Parse`\n\n\nParse.Parse = Parse;\nmodule.exports = Parse;","map":{"version":3,"sources":["/home/arsalan/Desktop/Front/Home/node_modules/parse/lib/browser/Parse.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","_promise","_decode","_encode","_CoreManager","_CryptoController","_InstallationController","ParseOp","_RESTController","Parse","initialize","applicationId","javaScriptKey","default","get","process","env","SERVER_RENDERING","console","log","_initialize","masterKey","set","setAsyncStorage","storage","setLocalDatastoreController","controller","value","serverURL","serverAuthToken","serverAuthType","liveQueryServerURL","encryptedUser","secret","idempotency","ACL","Analytics","AnonymousUtils","Cloud","CoreManager","Config","Error","FacebookUtils","File","GeoPoint","Polygon","Installation","LocalDatastore","Object","Op","Set","SetOp","Unset","UnsetOp","Increment","IncrementOp","Add","AddOp","Remove","RemoveOp","AddUnique","AddUniqueOp","Relation","RelationOp","Push","Query","Role","Schema","Session","Storage","User","LiveQuery","LiveQueryClient","_request","_len","arguments","length","args","Array","_key","getRESTController","request","apply","_ajax","_len2","_key2","ajax","_","disallowObjects","_getInstallationId","getInstallationController","currentInstallationId","enableLocalDatastore","isEnabled","isLocalDatastoreEnabled","dumpLocalDatastore","resolve","_getAllContents","enableEncryptedUser","isEncryptedUserEnabled","setCryptoController","setInstallationController","setRESTController","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Contains all Parse API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nvar Parse = {\n  /**\n   * Call this method first to set up your authentication tokens for Parse.\n   *\n   * @param {string} applicationId Your Parse Application ID.\n   * @param {string} [javaScriptKey] Your Parse JavaScript Key (Not needed for parse-server)\n   * @param {string} [masterKey] Your Parse Master Key. (Node.js only!)\n   * @static\n   */\n  initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    if (\"browser\" === 'browser' && _CoreManager.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {\n      /* eslint-disable no-console */\n      console.log('It looks like you\\'re using the browser version of the SDK in a ' + 'node.js environment. You should require(\\'parse/node\\') instead.');\n      /* eslint-enable no-console */\n    }\n\n    Parse._initialize(applicationId, javaScriptKey);\n  },\n  _initialize: function (applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  },\n\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  },\n\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Parse.setAsyncStorage Parse.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n  setLocalDatastoreController: function (controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  },\n\n  /**\n   * @member {string} Parse.applicationId\n   * @static\n   */\n  set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  },\n\n  get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  },\n\n  /**\n   * @member {string} Parse.javaScriptKey\n   * @static\n   */\n  set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  },\n\n  get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  },\n\n  /**\n   * @member {string} Parse.masterKey\n   * @static\n   */\n  set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  },\n\n  get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  },\n\n  /**\n   * @member {string} Parse.serverURL\n   * @static\n   */\n  set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  },\n\n  get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthToken\n   * @static\n   */\n  set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  },\n\n  get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  },\n\n  /**\n   * @member {string} Parse.serverAuthType\n   * @static\n   */\n  set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  },\n\n  get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  },\n\n  /**\n   * @member {string} Parse.liveQueryServerURL\n   * @static\n   */\n  set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  },\n\n  get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  },\n\n  /**\n   * @member {string} Parse.encryptedUser\n   * @static\n   */\n  set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  },\n\n  get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  },\n\n  /**\n   * @member {string} Parse.secret\n   * @static\n   */\n  set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  },\n\n  get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  },\n\n  /**\n   * @member {boolean} Parse.idempotency\n   * @static\n   */\n  set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  },\n\n  get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  }\n\n};\nParse.ACL = require('./ParseACL').default;\nParse.Analytics = require('./Analytics');\nParse.AnonymousUtils = require('./AnonymousUtils').default;\nParse.Cloud = require('./Cloud');\nParse.CoreManager = require('./CoreManager');\nParse.Config = require('./ParseConfig').default;\nParse.Error = require('./ParseError').default;\nParse.FacebookUtils = require('./FacebookUtils').default;\nParse.File = require('./ParseFile').default;\nParse.GeoPoint = require('./ParseGeoPoint').default;\nParse.Polygon = require('./ParsePolygon').default;\nParse.Installation = require('./ParseInstallation').default;\nParse.LocalDatastore = require('./LocalDatastore');\nParse.Object = require('./ParseObject').default;\nParse.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nParse.Push = require('./Push');\nParse.Query = require('./ParseQuery').default;\nParse.Relation = require('./ParseRelation').default;\nParse.Role = require('./ParseRole').default;\nParse.Schema = require('./ParseSchema').default;\nParse.Session = require('./ParseSession').default;\nParse.Storage = require('./Storage');\nParse.User = require('./ParseUser').default;\nParse.LiveQuery = require('./ParseLiveQuery').default;\nParse.LiveQueryClient = require('./LiveQueryClient').default;\n\nParse._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nParse._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nParse._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nParse._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nParse._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nParse.enableLocalDatastore = function () {\n  Parse.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isLocalDatastoreEnabled = function () {\n  return Parse.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Parse.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nParse.dumpLocalDatastore = function () {\n  if (!Parse.LocalDatastore.isEnabled) {\n    console.log('Parse.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return _promise.default.resolve({});\n  } else {\n    return Parse.LocalDatastore._getAllContents();\n  }\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nParse.enableEncryptedUser = function () {\n  Parse.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nParse.isEncryptedUserEnabled = function () {\n  return Parse.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default);\n\n// For legacy requires, of the form `var Parse = require('parse').Parse`\nParse.Parse = Parse;\nmodule.exports = Parse;"]},"metadata":{},"sourceType":"script"}